// Code generated by go-bindata.
// sources:
// schema.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x6f\x9c\x3e\x10\xbd\xe7\x53\x20\xf2\x3b\xfd\xd4\x64\x5b\xa9\xa7\x3d\x57\x4a\x2a\x45\x6a\x94\xed\xad\x8a\x22\x07\x66\x59\x27\x60\x13\x7b\x48\xb5\xaa\xf2\xdd\x2b\x30\x10\x08\x36\x7f\x82\x49\x41\x62\x0f\x39\x30\xc3\xd8\x1e\xbf\xf7\x3c\x66\xf2\xe7\xc4\x71\x1c\xc7\xfd\x4f\x7a\x07\x88\x88\xbb\x75\xdc\x03\x62\xbc\xdd\x6c\x1e\x24\x67\x67\xea\xe9\x39\x17\xc1\xc6\x17\x64\x8f\x67\x9f\xbf\x6e\xd4\xb3\x53\xf7\x53\xfe\xa6\x80\x7d\xfa\xda\xe9\xc6\x87\x3d\x65\x14\x29\x67\x72\xb3\x53\xe1\x72\x9f\x8a\xc5\xdd\x3a\x6a\xc8\xcc\xf0\x8d\xca\x98\xa0\x77\xa8\x3d\xcd\x2c\x02\x9e\x12\x2a\xc0\x77\xb7\xce\xaf\x9a\x25\xb3\x32\x12\x41\x1e\xbc\xfe\x16\x4f\x10\xa4\x5b\x33\xdc\xd6\xfd\xdc\x58\xf0\x18\x04\x52\x90\x8d\x51\x5f\x63\xeb\x2c\x99\x15\x8f\x71\x6a\x75\x25\x0a\xca\x02\xb7\xe1\xf4\x62\x9e\x95\x31\x26\x45\x88\xcc\x66\x67\xd4\xfe\xe8\xa3\x69\xf7\xec\x26\x9d\x66\x73\x45\x86\x55\x65\x81\x22\xca\xbe\xe7\x93\xff\x62\x70\x49\x18\x7d\x4a\xa0\xf0\x42\x91\x80\xc1\xb1\xc8\x2c\x11\x82\x1c\x35\x89\x3d\x69\x99\x90\x4b\x7c\x3f\x5b\x05\x09\xaf\xab\xdb\xbb\x27\xa1\x7c\x33\x5e\x39\x0e\xbf\x7f\x00\x0f\x5f\x07\xaa\x84\x74\x2f\x08\xc2\x6f\x72\xb4\x05\xcb\x67\x10\x92\x72\xa6\x33\xa1\xa0\x41\x00\x42\xea\x6c\x7e\xce\x8e\xb1\x88\xf6\x41\x7a\x82\xc6\x69\x7e\xec\x02\xbb\x32\xc1\xb9\x83\xbb\x54\x9a\xd9\xe2\xdb\x90\xdf\x90\x1c\xef\x68\x44\x02\xcb\x9a\x54\x84\xb6\xaf\x76\x21\x4f\x01\x6d\x8e\x69\x6d\xb7\x0d\x3b\x7d\xa5\xc6\xef\x35\x57\xfb\xab\x97\x20\x9e\xa9\xb7\x00\x42\xec\xd4\x44\x17\xc5\x87\x52\x2c\xe7\x9e\xdc\x9f\x6a\xa2\x8b\x4a\x6e\x71\x48\xbd\x9f\x0e\x1f\x79\x42\x5f\x12\xe6\x87\x1a\x99\xe9\x38\xa1\x7d\xed\x31\x30\xf8\x40\x35\x95\xad\xfd\x73\xa5\x95\x0e\x44\xca\x82\x16\x74\xc7\x04\x11\x04\xbb\x6e\x9f\x5e\xe9\x7e\xfe\x7f\xab\xdd\x69\xd9\x16\x33\xb4\xde\x2e\xb1\x99\xe4\xe6\x18\x19\x08\xdb\xc3\x65\x8e\xf7\x9c\x87\x40\x74\x75\x52\xc3\x95\x32\x84\x94\x61\x3d\x5c\x59\x12\xdd\xf7\xf5\x0c\xc3\x3e\x7e\x39\x30\x7b\x78\x9a\xf6\xbf\xfa\xbb\x35\x5a\x5f\x06\xe9\x87\x89\x36\xfa\x68\x13\xf3\xf3\x4a\x5f\x05\x74\x52\xeb\xc0\xf9\xe3\xfc\xf5\x5d\xad\xee\x92\xf3\xc7\x61\x12\xff\x0e\x59\x0e\xe1\x19\xc2\x85\x88\x72\x25\x2d\x03\x75\x39\x8b\x3e\x4a\x93\x57\xf5\x5c\xd5\xb3\xfe\xb3\xac\x9e\xba\x7a\x54\xbd\xb3\x04\x6a\xfe\x48\x30\x4e\x70\x70\xb9\x44\x90\x8c\xa3\xa5\xc7\xfd\x1e\x29\x2a\xf0\xd8\xef\xea\x9a\x4e\xca\x18\x72\x30\x25\xbb\xa9\xd8\x49\xc1\x1e\xd4\xeb\x41\xb9\x6e\xaa\x75\x51\xac\x9b\x5a\xad\x94\x6a\x52\xe9\x43\x21\x7a\x03\x32\xe6\x4c\x36\xe1\xd2\x01\x52\x10\x82\x8b\x71\x28\x55\x21\x3a\x61\x5a\x6c\x73\x2f\x98\xd2\xbd\xdd\xeb\x01\xd7\x33\xb8\xb4\x4f\xfd\x5d\x25\x57\x90\x7f\x8c\x91\xec\x1b\xf5\x40\x80\x48\x84\x78\xe4\x27\x54\x22\x8f\xcc\x9b\x39\x40\x44\xce\x9f\xf9\x97\xcf\x25\xd3\xa7\x2e\x9e\xd5\xce\xcf\x3d\x1d\x3b\x84\xd8\xfa\xa7\xa2\x39\xb5\x53\x76\x45\x0e\x07\xd1\x36\x22\xf2\x10\x52\x16\xdc\xc9\x6a\x33\xb1\xe6\x12\xe4\x7d\x9a\x51\xdc\x0e\x0c\xcd\x9e\xd2\x61\x6a\x65\xbd\xd0\xad\xc2\x31\x40\xfa\x6d\x56\x96\x51\x7e\x16\x5f\x9b\x2d\x35\xd4\xc6\x5f\x17\x27\xeb\x89\x4d\xd1\x52\x58\x6f\xb6\xeb\xcd\xb6\xfa\x5b\x6f\xb6\x55\x69\x49\x4f\xcf\xa1\x15\xa1\xae\xf9\x35\x54\x42\x6c\xd7\x6f\x94\xb5\xd6\xf7\x2b\xc9\x4b\xd7\x95\xe4\x8d\xb1\xde\x43\x72\x69\x38\x94\x1b\x41\x67\xc1\xf3\xa2\xa7\x6a\xb3\x84\xd0\x3c\x3f\xa8\xc6\xe2\x5c\xff\xe5\xa6\x9c\xde\xdc\x2f\x35\x45\x83\xd6\xf6\xbd\x66\xca\x16\xf8\x5a\xbb\xad\xb2\xbe\x7c\x59\x9f\x7b\xed\x76\xa2\xfe\xbe\xfc\x0d\x00\x00\xff\xff\xb1\xbc\x61\x21\x7b\x2c\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 11387, mode: os.FileMode(420), modTime: time.Unix(1528922437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
